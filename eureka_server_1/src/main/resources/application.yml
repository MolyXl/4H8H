server:
  port: 7071
eureka:
  server:
    #服务端开启自我保护模式。无论什么情况，服务端都会保持一定数量的服务。避免client与server的网络问题，而出现大量的服务被清除。
    enable-self-preservation: true
    #开启清除无效服务的定时任务，时间间隔。默认1分钟
    eviction-interval-timer-in-ms: 60000
    #间隔多长时间，清除过期的delta数据
    delta-retention-timer-interval-in-ms: 0
    #过期数据，是否也提供给client
    disable-delta: false
    #eureka服务端是否记录client的身份header
    log-identity-headers: true
    #请求频率限制器
    rate-limiter-burst-size: 10
    #是否开启请求频率限制器
    rate-limiter-enabled: false
    #请求频率的平均值
    rate-limiter-full-fetch-average-rate: 100
    #是否对标准的client进行频率请求限制。如果是false，则只对非标准client进行限制
    rate-limiter-throttle-standard-clients: false
    #注册服务、拉去服务列表数据的请求频率的平均值
    rate-limiter-registry-fetch-average-rate: 500
    #在设置的时间范围类，期望与client续约的百分比。
    renewal-percent-threshold: 0.85
    #多长时间更新续约的阈值
    renewal-threshold-update-interval-ms: 0
    #对于缓存的注册数据，多长时间过期
    response-cache-auto-expiration-in-seconds: 180
    #多长时间更新一次缓存中的服务注册数据
    response-cache-update-interval-ms: 0
    #缓存增量数据的时间，以便在检索的时候不丢失信息
    retention-time-in-m-s-in-delta-queue: 0
    #当时间戳不一致的时候，是否进行同步
    sync-when-timestamp-differs: true
    #是否采用只读缓存策略，只读策略对于缓存的数据不会过期。
    use-read-only-response-cache: true
  instance:
    hostname: 127.0.0.1
    prefer-ip-address: true         #是否优先使用ip
    app-group-name: eureka_server
    lease-expiration-duration-in-seconds: 90  #服务中心删除此服务实例的等待时间(秒为单位),时间间隔为最后一次服务中心接受到的心跳时间
    lease-renewal-interval-in-seconds: 30     #该实例给服务中心发送心跳的间隔时间，用于表明该服务实例可用
    #registry:
      #expected-number-of-clients-sending-renews: 1  #每分钟续约次数
  client:
    registerWithEureka: true
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:7072/eureka/
  dashboard:
    path: http://${eureka.instance.hostname}:7072/eureka/
spring:
  application:
    name: eureka-server-1
  security:
    user:
      name: macro
      password: 123456